# catalog
catalog:
  actions:
    # golang
    - repository: central
      name: golang-run
      type: builtin-golang
      description: |
        Start your project locally.
      version: 1.0
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    - repository: central
      name: golang-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    - repository: central
      name: golang-test
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    - repository: central
      name: golang-lint
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    # java
    - repository: central
      name: java-run
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    - repository: central
      name: java-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    - repository: central
      name: java-test
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    - repository: central
      name: java-publish
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    # python
    - repository: central
      name: python-run
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    - repository: central
      name: python-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    - repository: central
      name: python-lint
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    # node
    - repository: central
      name: node-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "npm"
    # helm
    - repository: central
      name: helm-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-test
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-lint
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-publish-nexus
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    # hugo
    - repository: central
      name: hugo-run
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "hugo"
    - repository: central
      name: hugo-build
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "hugo"
    - repository: central
      name: hugo-test
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "hugo"
    # optimization
    - repository: central
      name: upx-optimize
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: ENV["UPX_ENABLED"] == "true"
    # container
    - repository: central
      name: container-package-buildah
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && (MODULE_BUILD_SYSTEM_SYNTAX == "buildah-script" || MODULE_BUILD_SYSTEM_SYNTAX == "containerfile")
    - repository: central
      name: container-package-docker
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && MODULE_BUILD_SYSTEM_SYNTAX == "containerfile"
    - repository: central
      name: container-publish
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && (MODULE_BUILD_SYSTEM_SYNTAX == "buildah-script" || MODULE_BUILD_SYSTEM_SYNTAX == "containerfile")
    # scanner
    #- repository: central
    #  name: trivy-fs-scan
    #  type: builtin-golang
    #  scope: project
    - repository: central
      name: fossa-source-scan
      type: builtin-golang
      scope: project
      rules:
        - type: cel
          expression: ENV["FOSSA_API_KEY"] != "" && NCI_COMMIT_REF_TYPE == "branch"
      access:
        env:
          - FOSSA_.*
    #- repository: central
    #  name: gitleaks-scan
    #  type: builtin-golang
    #  scope: project
    #- repository: central
    #  name: gitguardian-scan
    #  type: builtin-golang
    #  scope: project
    - repository: central
      name: sonarqube-scan
      type: builtin-golang
      scope: project
      rules:
        - type: cel
          expression: ENV["SONAR_TOKEN"] != "" && NCI_COMMIT_REF_TYPE == "branch"
      access:
        env:
          - SONAR_.*
    - repository: central
      name: syft-container-sbom
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container"
      access:
        env:
          - SYFT_.*
    - repository: central
      name: grype-scan-sbom
      type: builtin-golang
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && NCI_COMMIT_REF_TYPE == "branch"
      access:
        env:
          - GRYPE_.*
    #- repository: central
    #  name: dependencycheck-scan
    #  type: builtin-golang
    #  scope: project
    # publish
    - repository: central
      name: repo-tag-create
      type: builtin-golang
      scope: project
    - repository: central
      name: repo-changelog-generate
      type: builtin-golang
      scope: project
    - repository: central
      name: repo-release-github
      type: builtin-golang
      scope: project
