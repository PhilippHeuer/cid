# catalog
catalog:
  actions:
    # golang
    - repository: central
      name: go-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run go-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    - repository: central
      name: go-test
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run go-test
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    - repository: central
      name: go-lint
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run go-lint
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gomod"
    # java
    - repository: central
      name: java-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run java-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    - repository: central
      name: java-test
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run java-test
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    - repository: central
      name: java-publish
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run java-publish
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "gradle"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "maven"
    # python
    - repository: central
      name: python-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run python-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    - repository: central
      name: python-test
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run python-test
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    - repository: central
      name: python-lint
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run python-lint
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "python-requirements.txt"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "pipfile"
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "setup.py"
    # node
    - repository: central
      name: node-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run node-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "npm"
    - repository: central
      name: node-test
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run node-test
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "npm"
    # helm
    - repository: central
      name: helm-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run helm-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-test
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run helm-test
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-lint
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run helm-lint
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm"
    - repository: central
      name: helm-publish-nexus
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run helm-publish-nexus
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "helm" && ENV["HELM_NEXUS_URL"] != ""
    # hugo
    - repository: central
      name: hugo-start
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run hugo-start
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "hugo"
    - repository: central
      name: hugo-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run hugo-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "hugo"
    # mkdocs
    - repository: central
      name: mkdocs-start
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run mkdocs-start
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "mkdocs" && MODULE_BUILD_SYSTEM_SYNTAX == "default"
    - repository: central
      name: mkdocs-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run mkdocs-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "mkdocs" && MODULE_BUILD_SYSTEM_SYNTAX == "default"
    # techdocs
    - repository: central
      name: techdocs-start
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run techdocs-start
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "mkdocs" && MODULE_BUILD_SYSTEM_SYNTAX == "mkdocs-techdocs"
    - repository: central
      name: techdocs-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run techdocs-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "mkdocs" && MODULE_BUILD_SYSTEM_SYNTAX == "mkdocs-techdocs"
    - repository: central
      name: techdocs-publish
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run techdocs-publish
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "mkdocs" && MODULE_BUILD_SYSTEM_SYNTAX == "mkdocs-techdocs"
    # optimization
    - repository: central
      name: upx-optimize
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run upx-optimize
      scope: module
      rules:
        - type: cel
          expression: ENV["UPX_ENABLED"] == "true"
    # container
    - repository: central
      name: buildah-build
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run buildah-build
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && (MODULE_BUILD_SYSTEM_SYNTAX == "buildah-script" || MODULE_BUILD_SYSTEM_SYNTAX == "containerfile")
    - repository: central
      name: buildah-publish
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run buildah-publish
      scope: module
      rules:
        - type: cel
          expression: MODULE_BUILD_SYSTEM == "container" && (MODULE_BUILD_SYSTEM_SYNTAX == "buildah-script" || MODULE_BUILD_SYSTEM_SYNTAX == "containerfile")
    # scanner
    - repository: central
      name: gitguardian-scan
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run ggshield-scan
      scope: project
      rules:
        - type: cel
          expression: ENV["GITGUARDIAN_API_KEY"] != "" && NCI_COMMIT_REF_TYPE == "branch"
      access:
        env:
          - GITGUARDIAN_.*
    - repository: central
      name: sonarqube-scan
      type: container
      container:
        image: quay.io/cidverse/cid-actions-go:latest
        command: central run sonarqube-scan
      scope: project
      rules:
        - type: cel
          expression: ENV["SONAR_TOKEN"] != "" && NCI_COMMIT_REF_TYPE == "branch"
      access:
        env:
          - SONAR_.*
