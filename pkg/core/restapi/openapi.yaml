openapi: 3.0.1
info:
  title: CID Workflow and Action API
  license:
    name: MIT
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: info
    description: Information
  - name: vcs
    description: VCS Operations
  - name: file
    description: File Operations
  - name: command
    description: Command Operations
paths:
  # info api
  /health:
    get:
      tags:
        - info
      summary: simple healthcheck
      operationId: health
      responses:
        200:
          description: healthcheck result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /log:
    post:
      tags:
        - info
      summary: logs a message
      operationId: log
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogMessageRequest'
      responses:
        201:
          description: Null response
          content: {}
  /project:
    get:
      tags:
        - info
      summary: query information about the current project
      operationId: projectInformation
      responses:
        200:
          description: project information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInformation'
  /config/current:
    get:
      tags:
        - info
      summary: query the config for the currently running action
      operationId: configCurrent
      responses:
        200:
          description: config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionConfig'
  /env:
    get:
      tags:
        - info
      summary: query the environment (NCI variables and variables have been granted explicit access to)
      operationId: projectEnv
      responses:
        200:
          description: project env
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectEnv'
  /module:
    get:
      tags:
        - info
      summary: query modules
      operationId: modules
      responses:
        200:
          description: project modules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModuleList'
  /module/current:
    get:
      tags:
        - info
      summary: query current module (only available for module scoped actions)
      operationId: currentModule
      responses:
        200:
          description: current module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModule'
        400:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # vcs api
  /vcs/commit:
    get:
      tags:
        - vcs
      summary: vcs commits
      operationId: vcsCommits
      parameters:
        - name: changes
          in: path
          description: include changes in response
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: query commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSCommitList'
  /vcs/commit/{hash}:
    get:
      tags:
        - vcs
      summary: vcs commits
      operationId: vcsCommits
      parameters:
        - name: hash
          in: path
          description: commit hash
          required: true
          schema:
            type: string
        - name: changes
          in: path
          description: include changes in response
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: query commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSCommit'
  /vcs/tag:
    get:
      tags:
        - vcs
      summary: vcs tags
      operationId: getTags
      responses:
        200:
          description: query tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSTagList'
  /vcs/release:
    get:
      tags:
        - vcs
      summary: vcs releases
      operationId: getReleases
      responses:
        200:
          description: query releases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSReleaseList'
  # file api
  /files/list:
    get:
      tags:
        - file
      summary: List files
      operationId: listFiles
      parameters:
        - name: path
          in: query
          description: filter by path
          required: false
          example: src/main/java
          schema:
            type: string
        - name: extensions
          in: query
          description: filter by file extension(s)
          required: false
          example: [java, kt]
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: file list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
  /files/read:
    get:
      tags:
        - file
      summary: Read file content
      operationId: readFiles
      parameters:
        - name: path
          in: query
          description: full path to the files
          required: false
          example: [src/main/java/Main.java, src/main/java/Main.kt]
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: list with file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentList'
  /files/write:
    post:
      tags:
        - file
      summary: Write file content
      operationId: writeFile
      parameters:
        - name: file
          in: query
          description: full path to the file
          required: true
          example: src/main/java/Main.java
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        201:
          description: Null response
          content: {}
  # command api
  /command:
    post:
      tags:
        - command
      summary: Executes a command
      operationId: executeCommand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteCommand'
      responses:
        200:
          description: command execution result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteCommandResult'
components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: number
          example: 400
        title:
          type: string
          example: error title
        detail:
          type: string
          example: error details
    Healthcheck:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: up
    LogMessageRequest:
      required:
        - level
        - message
      type: object
      properties:
        level:
          type: string
          example: debug
        message:
          type: string
          example: hello world
        context:
          type: object
          description: dynamic key value properties / log context
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
    ActionConfig:
      type: object
      properties:
        debug:
          type: boolean
          description: enables debug logs for the action / logic
          default: false
        log:
          type: object
          description: "requested loglevel for specific components, prefixes: bin-"
          additionalProperties:
            type: string
        project_dir:
          type: string
          description: project root directory
          example: /projects/my-project/
        temp_dir:
          type: string
          description: temp directory
          example: /projects/my-project/.tmp
        artifact_dir:
          type: string
          description: artifact directory
          example: /projects/my-project/.dist
        host_name:
          type: string
          description: hostname
          example: localhost
        host_user_id:
          type: string
          description: user id
          example: 1000
        host_user_name:
          type: string
          description: login name of the current user
          example: root
        host_group_id:
          type: string
          description: group id
          example: 1000
        config:
          type: object
          description: dynamic configuration options for the action
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
    ProjectEnv:
      type: object
      additionalProperties:
        type: string
    ProjectDependency:
      type: object
      properties:
        type:
          type: string
          example: gomod
        id:
          type: string
          example: github.com/google/uuid
        version:
          type: string
          example: v1.3.0
    ProjectModule:
      type: object
      properties:
        project_dir:
          type: string
          description: project root directory
          example: /projects/my-project
        module_dir:
          type: string
          description: module root directory
          example: /projects/my-project
        discovery:
          type: array
          items:
            type: string
            example: "file~/projects/my-project/Dockerfile"
          description: module detected based on
        name:
          type: string
          description: module name
          example: my-project
        slug:
          type: string
          description: module name
          example: my-project
        build_system:
          type: string
          description: module name
          example: container
        build_system_syntax:
          type: string
          description: module name
          example: containerfile
        language:
          type: object
          additionalProperties:
            type: string
          description: module name
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDependency'
          description: module name
        submodules:
          description: submodules
          type: array
          items:
            $ref: '#/components/schemas/ProjectModule'
        files:
          type: array
          items:
            type: string
            example: "/projects/my-project/Dockerfile"
          description: all files in the project directory
    ProjectModuleList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectModule'
    # vcs
    VCSCommitList:
      type: array
      items:
        $ref: '#/components/schemas/VCSCommit'
    VCSCommit:
      type: object
      properties:
        hash_short:
          type: string
          description: vcs commit hash (short)
          example: 67504dd
        hash:
          type: string
          description: vcs commit hash (long)
          example: 67504dddb336879afa6470fb041071b7db23075c
        message:
          type: string
          description: message
          example: "feat: initial commit"
        description:
          type: string
          description: description
          example: ""
        author:
          $ref: '#/components/schemas/VCSTag'
        committer:
          $ref: '#/components/schemas/VCSTag'
        tags:
          $ref: '#/components/schemas/VCSTagList'
        authored_at:
          type: date
          description: authored at
          example: "2022-11-21T23:55:08+01:00"
        committed_at:
          type: date
          description: committed at
          example: "2022-11-21T23:55:08+01:00"
    VCSAuthor:
      type: object
      properties:
        name:
          type: string
          description: name
          example: Firstname Lastname
        email:
          type: string
          description: email
          example: noreply@examplee.com
    VCSTagList:
      type: array
      items:
        $ref: '#/components/schemas/VCSTag'
    VCSTag:
      type: object
      properties:
        type:
          type: string
          description: type of the tag
          example: tag
        value:
          type: string
          description: name of the tag
          example: v1.0.0
        hash:
          type: string
          description: vcs hash of the tag
          example: e7fccc74858e1e59225d9998e86949572b9c4332
    VCSReleaseList:
      type: array
      items:
        $ref: '#/components/schemas/VCSRelease'
    VCSRelease:
      type: object
      properties:
        version:
          type: string
          description: version
          example: 1.0.0
        ref:
          $ref: '#/components/schemas/VCSTag'
    # files
    File:
      required:
        - path
      type: object
      properties:
        file:
          type: string
          description: full path to the file
          example: src/main/java/Main.java
        directory:
          type: string
          description: directory
          example: src/main/java
        file_name:
          type: string
          description: file name
          example: Main.java
        file_extension:
          type: string
          description: file extension
          example: java
    FileList:
      type: array
      items:
        $ref: '#/components/schemas/File'
    FileContent:
      required:
        - path
        - format
        - content
      type: object
      properties:
        path:
          type: string
          description: full path to the file
          example: src/main.py
        format:
          type: string
          description: format of the content (plain/base64)
          example: plain
        content:
          type: string
          description: full content of the file
          example: print("Goodbye, World!")
    FileContentList:
      type: array
      items:
        $ref: '#/components/schemas/FileContent'
    ExecuteCommand:
      type: object
      properties:
        command:
          type: string
          description: command
          required: true
          example: npm install
        capture_output:
          type: boolean
          description: capture and return the output (stdout and stderr will be passed thru if not set)
          default: false
        work_dir:
          type: string
          description: directory to execute the command in (default = project root)
          example: /projects/my-project
        env:
          type: object
          additionalProperties:
            type: string
          description: directory to execute the command in (default = project root)
        ports:
          type: array
          description: expose container ports
          items:
            type: number
    ExecuteCommandResult:
      type: object
      properties:
        code:
          type: number
          description: command exit code
          example: 1
        command:
          type: string
          description: the command being executed
          example: npm install
        dir:
          type: string
          description: directory the command is executed in
          example: /projects/my-project
        error:
          type: string
          description: error message
          example: exit status 1
        stdout:
          type: string
          description: standard output (if capture-output was request, empty otherwise)
          example: ""
        stderr:
          type: string
          description: error output (if capture-output was request, empty otherwise)
          example: ""
    AnyValue:
      description: 'Can be anything: string, number, array, object, etc., including `null`'
